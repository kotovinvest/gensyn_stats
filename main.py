import logging
import time
import schedule
from datetime import datetime
from telegram_notifier import TelegramNotifier
from gensyn_data_collector import GensynDataCollector
from data_manager import DataManager
from config import Config

logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(Config.LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

logging.getLogger('requests').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('web3').setLevel(logging.WARNING)
logging.getLogger('schedule').setLevel(logging.WARNING)

class GensynMonitor:
    def __init__(self):
        self.telegram = TelegramNotifier(
            bot_token=Config.TELEGRAM_BOT_TOKEN,
            chat_id=Config.TELEGRAM_CHAT_ID
        )
        self.data_collector = GensynDataCollector()
        self.data_manager = DataManager()
    
    def run_monitoring_cycle(self):
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            
            start_message = f"üöÄ <b>–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Gensyn</b>\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            self.telegram.send_message(start_message)
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–¥–∞—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞
            nodes_data = self.data_collector.read_nodes_data(Config.NODE_DATA_FILE)
            if not nodes_data:
                error_message = f"‚ùå <b>–û–®–ò–ë–ö–ê:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ {Config.NODE_DATA_FILE}"
                self.telegram.send_message(error_message)
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–æ–¥")
                return
            
            previous_data = self.data_manager.load_previous_data()
            
            current_data = self.data_collector.collect_node_data(nodes_data)
            
            changes = self.data_manager.calculate_changes(current_data, previous_data)
            
            self.data_manager.print_console_report(current_data, changes)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M")
            excel_filename = f"gensyn_monitor_{timestamp}.xlsx"
            excel_path = self.data_manager.save_excel_report(current_data, changes, excel_filename)
            
            self.telegram.send_monitoring_notifications(current_data, changes, excel_path)
            
            self.data_manager.save_current_data(current_data)
            self.data_manager.save_to_history(current_data)
            
            logger.info("‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            error_message = f"‚ùå <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:</b>\n<code>{str(e)}</code>"
            self.telegram.send_message(error_message)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def start_continuous_monitoring(self):
        print("üîÑ GENSYN CONTINUOUS MONITOR WITH TELEGRAM")
        print("=" * 60)
        print(f"‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {Config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
        print("üì± –û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
        
        startup_message = (
            f"ü§ñ <b>GENSYN MONITOR –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {Config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç\n"
            f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–ö–õ\n"
            f"üîÑ –†–µ–∂–∏–º: –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
            f"‚ÑπÔ∏è –°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ {Config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç"
        )
        self.telegram.send_message(startup_message)
        
        schedule.every(Config.MONITORING_INTERVAL_MINUTES).minutes.do(self.run_monitoring_cycle)
        
        self.run_monitoring_cycle()
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)
        except KeyboardInterrupt:
            shutdown_message = (
                f"üõë <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –û–°–¢–ê–ù–û–í–õ–ï–ù</b>\n"
                f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üë§ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            )
            self.telegram.send_message(shutdown_message)
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    print("=== GENSYN TELEGRAM MONITOR v5.0 ===")
    print("üìã –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–¥")
    print("üñ•Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CPU/GPU –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–º–µ–Ω")
    print("–¢—Ä–µ–±—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install requests pandas openpyxl web3 schedule")
    print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ {Config.MONITORING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
    print("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("‚ö†Ô∏è  –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –Ω–æ–¥ (> 30 –º–∏–Ω –±–µ–∑ TX)")
    print("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏")
    print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö")
    print("=" * 70)
    
    monitor = GensynMonitor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Excel —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–¥
    try:
        nodes_data = monitor.data_collector.read_nodes_data(Config.NODE_DATA_FILE)
        if not nodes_data:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª {Config.NODE_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç!")
            print(f"üí° –°–æ–∑–¥–∞–π—Ç–µ Excel —Ñ–∞–π–ª '{Config.NODE_DATA_FILE}' —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:")
            print("   A1: Name (–Ω–∞–ø—Ä–∏–º–µ—Ä: akk 1)")
            print("   B1: ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: QmSALzGJh7msJ2sAMiAhmPHvMTqQSKt8XwfYpBqu4QqinL)")
            print("   C1: Type (CPU –∏–ª–∏ GPU)")
            print("\n–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
            print("Name        | ID                                           | Type")
            print("akk 1       | QmSALzGJh7msJ2sAMiAhmPHvMTqQSKt8XwfYpBqu4QqinL | CPU")
            print("akk 22      | QmRDaRP1NU5x3y3zyYSHgaR1AhLLT79xnxDqE6m3ZYaQcg | GPU")
            return
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(nodes_data)} –Ω–æ–¥ –≤ —Ñ–∞–π–ª–µ {Config.NODE_DATA_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    test_message = "üß™ <b>–¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø</b>\n‚úÖ Gensyn Monitor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
    if monitor.telegram.send_message(test_message):
        print("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º!")
        return
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫ (—Å –æ—Ç—á–µ—Ç–æ–º –≤ Telegram)")
    print("2. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ {} –º–∏–Ω—É—Ç)".format(Config.MONITORING_INTERVAL_MINUTES))
    
    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == "1":
            print("üöÄ –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            monitor.run_monitoring_cycle()
        elif choice == "2":
            print("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            monitor.start_continuous_monitoring()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
            monitor.run_monitoring_cycle()
            
    except KeyboardInterrupt:
        shutdown_message = (
            f"üõë <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n"
            f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üë§ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        )
        monitor.telegram.send_message(shutdown_message)
        print("\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    main()