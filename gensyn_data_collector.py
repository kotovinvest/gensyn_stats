import requests
import json
import logging
import time
import pandas as pd
from typing import Dict, List, Optional
from web3 import Web3
from datetime import datetime
from config import Config

logger = logging.getLogger(__name__)

class GensynDataCollector:
    def __init__(self):
        self.peer_api_url = Config.GENSYN_PEER_API_URL
        self.rpc_url = Config.GENSYN_RPC_URL
        self.contract_address = Config.GENSYN_CONTRACT_ADDRESS
        self.chain_id = Config.GENSYN_CHAIN_ID
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        self.proxies = self.setup_proxy()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.setup_web3_connection()
        
        self.contract_abi = [
            {
                "inputs": [{"internalType": "string[]", "name": "peerIds", "type": "string[]"}],
                "name": "getEoa",
                "outputs": [{"internalType": "address[]", "name": "", "type": "address[]"}],
                "stateMutability": "view",
                "type": "function"
            }
        ]
        
        try:
            self.contract = self.w3.eth.contract(
                address=self.contract_address,
                abi=self.contract_abi
            )
            logger.info(f"‚úì –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.contract_address}")
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            self.contract = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = requests.Session()
        if self.proxies:
            self.session.proxies.update(self.proxies)
            logger.info("‚úì Requests session –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–æ–∫—Å–∏")
        
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def setup_proxy(self) -> Optional[Dict[str, str]]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ log:pass@ip:port"""
        try:
            if not Config.PROXY:
                logger.info("‚úì –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return None
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∞—Ç–∞ log:pass@ip:port
            if '@' not in Config.PROXY:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: login:password@ip:port")
                return None
            
            auth_part, server_part = Config.PROXY.split('@')
            
            if ':' not in auth_part or ':' not in server_part:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: login:password@ip:port")
                return None
            
            login, password = auth_part.split(':', 1)
            ip, port = server_part.split(':', 1)
            
            proxy_url = f"http://{login}:{password}@{ip}:{port}"
            
            proxies = {
                'http': proxy_url,
                'https': proxy_url
            }
            
            logger.info(f"‚úì –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {login}:***@{ip}:{port}")
            return proxies
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            return None
    
    def setup_web3_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏
            if self.proxies:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web3 —Å –ø—Ä–æ–∫—Å–∏
                from web3.providers import HTTPProvider
                
                provider = HTTPProvider(
                    endpoint_uri=self.rpc_url,
                    request_kwargs={
                        'timeout': 120,
                        'proxies': self.proxies
                    }
                )
                
                self.w3 = Web3(provider)
                logger.info(f"‚úì Web3 –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è Gensyn Testnet")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                self.w3 = Web3(Web3.HTTPProvider(
                    self.rpc_url,
                    request_kwargs={'timeout': 120}
                ))
                logger.info(f"‚úì Web3 –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è Gensyn Testnet")
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if self.w3.is_connected():
                logger.info(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gensyn Testnet (Chain ID: {self.chain_id})")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                try:
                    latest_block = self.w3.eth.get_block('latest')
                    logger.info(f"‚úì –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: {latest_block['number']}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∞: {e}")
            else:
                logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gensyn Testnet")
                
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Web3: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            try:
                self.w3 = Web3(Web3.HTTPProvider(
                    self.rpc_url,
                    request_kwargs={'timeout': 60}
                ))
                logger.info("‚úì –†–µ–∑–µ—Ä–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            except Exception as fallback_error:
                logger.error(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {fallback_error}")
                self.w3 = None
    
    def read_nodes_data(self, filename: str) -> List[Dict]:
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–¥–∞—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['Name', 'ID', 'Type']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ {filename}: {missing_columns}")
                logger.error(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                return []
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            df = df.dropna(subset=['ID'])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            nodes_data = []
            for _, row in df.iterrows():
                node_data = {
                    'custom_name': str(row['Name']).strip(),
                    'node_id': str(row['ID']).strip(),
                    'hardware_type': str(row['Type']).strip().upper()
                }
                nodes_data.append(node_data)
            
            logger.info(f"üìã –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(nodes_data)} –Ω–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ç–∏–ø–∞–º –∂–µ–ª–µ–∑–∞
            type_counts = {}
            for node in nodes_data:
                hw_type = node['hardware_type']
                type_counts[hw_type] = type_counts.get(hw_type, 0) + 1
            
            logger.info(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∂–µ–ª–µ–∑–∞: {dict(type_counts)}")
            
            return nodes_data
            
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.info(f"üí° –°–æ–∑–¥–∞–π—Ç–µ Excel —Ñ–∞–π–ª {filename} —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: Name, ID, Type")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
            return []
    
    def get_peer_info(self, node_id: str) -> Optional[Dict]:
        try:
            params = {'id': node_id}
            response = self.session.get(self.peer_api_url, params=params, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            logger.debug(f"‚úì Peer info –¥–ª—è {node_id}: {data.get('peerName', 'Unknown')}")
            return data
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ {node_id}: {e}")
            return None
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –Ω–æ–¥—ã {node_id}: {e}")
            return None
    
    def get_eoa_addresses_batch(self, node_ids: List[str]) -> Dict[str, str]:
        try:
            if not self.contract or not self.w3:
                logger.error("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏–ª–∏ Web3 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return {}
            
            if not self.w3.is_connected():
                logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Web3")
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                self.setup_web3_connection()
                if not self.w3 or not self.w3.is_connected():
                    return {}
            
            logger.info(f"üîó –ü–æ–ª—É—á–∞–µ–º EOA –∞–¥—Ä–µ—Å–∞ –¥–ª—è {len(node_ids)} –Ω–æ–¥...")
            
            # –ü–æ–ø—ã—Ç–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    logger.info(f"  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}...")
                    eoa_addresses = self.contract.functions.getEoa(node_ids).call({
                        'timeout': 180
                    })
                    logger.info(f"  ‚úì –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞")
                    break
                except Exception as e:
                    logger.warning(f"  ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    if attempt < max_retries - 1:
                        logger.info(f"  ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        time.sleep(10)
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        self.setup_web3_connection()
                        if self.w3 and self.w3.is_connected():
                            self.contract = self.w3.eth.contract(
                                address=self.contract_address,
                                abi=self.contract_abi
                            )
                            logger.info(f"  ‚úì –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                    else:
                        logger.error(f"  ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                        raise e
            
            result = {}
            for i in range(len(node_ids)):
                node_id = node_ids[i]
                
                if i < len(eoa_addresses):
                    eoa_address = eoa_addresses[i]
                    if eoa_address != "0x0000000000000000000000000000000000000000":
                        result[node_id] = eoa_address
                    else:
                        result[node_id] = None
                else:
                    result[node_id] = None
            
            valid_addresses = sum(1 for addr in result.values() if addr is not None)
            logger.info(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ {valid_addresses}/{len(node_ids)} –≤–∞–ª–∏–¥–Ω—ã—Ö EOA –∞–¥—Ä–µ—Å–æ–≤")
            return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ EOA –∞–¥—Ä–µ—Å–æ–≤: {e}")
            return {node_id: None for node_id in node_ids}
    
    def get_last_internal_tx_time(self, eoa_address: str) -> Optional[int]:
        try:
            if not eoa_address or eoa_address == "0x0000000000000000000000000000000000000000":
                return None
            
            api_endpoints = [
                f"https://gensyn-testnet.explorer.alchemy.com/api/v2/addresses/{eoa_address}/internal-transactions",
                f"https://gensyn-testnet.explorer.alchemy.com/api/v1/addresses/{eoa_address}/internal-transactions",
                f"https://gensyn-testnet.explorer.alchemy.com/api/addresses/{eoa_address}/internal-transactions",
                f"https://gensyn-testnet.explorer.alchemy.com/api/v2/addresses/{eoa_address}/internal_transactions", 
                f"https://gensyn-testnet.explorer.alchemy.com/api/v1/addresses/{eoa_address}/internal_transactions",
                f"https://gensyn-testnet.explorer.alchemy.com/api/v2/addresses/{eoa_address}/transactions?filter=internal",
            ]
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'en-US,en;q=0.5',
                'Referer': f'https://gensyn-testnet.explorer.alchemy.com/address/{eoa_address}?tab=internal_txns',
                'Origin': 'https://gensyn-testnet.explorer.alchemy.com'
            }
            
            for endpoint in api_endpoints:
                try:
                    response = self.session.get(endpoint, headers=headers, timeout=15)
                    
                    if response.status_code == 200:
                        try:
                            data = response.json()
                            
                            transactions = []
                            if isinstance(data, list):
                                transactions = data
                            elif isinstance(data, dict):
                                possible_keys = ['items', 'transactions', 'data', 'result', 'internal_transactions']
                                for key in possible_keys:
                                    if key in data and isinstance(data[key], list):
                                        transactions = data[key]
                                        break
                            
                            if transactions:
                                latest_timestamp = None
                                for tx in transactions:
                                    timestamp_fields = ['timestamp', 'block_timestamp', 'created_at', 'time', 'block_time']
                                    
                                    for field in timestamp_fields:
                                        if field in tx and tx[field]:
                                            timestamp_str = str(tx[field])
                                            try:
                                                if timestamp_str.isdigit():
                                                    timestamp = int(timestamp_str)
                                                    if timestamp > 1000000000000:
                                                        timestamp = timestamp / 1000
                                                else:
                                                    dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
                                                    timestamp = dt.timestamp()
                                                
                                                if latest_timestamp is None or timestamp > latest_timestamp:
                                                    latest_timestamp = timestamp
                                                    
                                                break
                                            except:
                                                continue
                                
                                if latest_timestamp:
                                    current_time = time.time()
                                    minutes_ago = int((current_time - latest_timestamp) / 60)
                                    return minutes_ago
                                    
                        except json.JSONDecodeError:
                            continue
                        
                except requests.exceptions.RequestException:
                    continue
            
            return None
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è tx –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {eoa_address}: {e}")
            return None
    
    def collect_node_data(self, nodes_data: List[Dict]) -> List[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–¥–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(nodes_data)} –Ω–æ–¥...")
        
        results = []
        node_ids = [node['node_id'] for node in nodes_data]
        eoa_addresses = self.get_eoa_addresses_batch(node_ids)
        
        for i, node_data in enumerate(nodes_data):
            node_id = node_data['node_id']
            custom_name = node_data['custom_name']
            hardware_type = node_data['hardware_type']
            
            logger.info(f"  üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–¥—ã {i+1}/{len(nodes_data)}: {custom_name} ({hardware_type})")
            
            peer_info = self.get_peer_info(node_id)
            if not peer_info:
                logger.warning(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å peer info –¥–ª—è {node_id}")
                result = {
                    'id': node_id,
                    'custom_name': custom_name,
                    'api_name': 'UNKNOWN',
                    'hardware_type': hardware_type,
                    'address': eoa_addresses.get(node_id),
                    'reward': 0,  # Wins
                    'score': 0,   # Rewards
                    'online': False,
                    'last_tx_minutes_ago': None,
                    'timestamp': datetime.now().isoformat()
                }
                results.append(result)
                continue
            
            eoa_address = eoa_addresses.get(node_id)
            last_tx_minutes = None
            
            if eoa_address:
                last_tx_minutes = self.get_last_internal_tx_time(eoa_address)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            result = {
                'id': node_id,
                'custom_name': custom_name,
                'api_name': peer_info.get('peerName', 'Unknown'),
                'hardware_type': hardware_type,
                'address': eoa_address,
                'reward': peer_info.get('score', 0),      # score –∏–∑ API = Wins
                'score': peer_info.get('reward', 0),     # reward –∏–∑ API = Rewards
                'online': peer_info.get('online', False),
                'last_tx_minutes_ago': last_tx_minutes,
                'timestamp': datetime.now().isoformat()
            }
            
            results.append(result)
            
            status = "üü¢"
            if last_tx_minutes is None:
                status = "‚ö´"
            elif last_tx_minutes > 30:
                status = "üî¥"
            elif last_tx_minutes > 15:
                status = "üü°"
                
            logger.info(f"    {status} {custom_name} ({hardware_type}) | TX: {last_tx_minutes}–º | Wins: {result['reward']} | Rewards: {result['score']}")
            
            time.sleep(1)
        
        logger.info(f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return results